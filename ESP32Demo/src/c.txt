#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_log.h"
#include "driver/uart.h"
#include "string.h"
#include "driver/gpio.h"

static const int RX_BUF_SIZE = 1024;

#define TXD_PIN (GPIO_NUM_1)
#define RXD_PIN (GPIO_NUM_3)

void init(void) {
    const uart_config_t uart_config = {
        .baud_rate = 115200,                    //设置波特率    115200
        .data_bits = UART_DATA_8_BITS,          //设置数据位    8位
        .parity = UART_PARITY_DISABLE,          //设置奇偶校验  不校验
        .stop_bits = UART_STOP_BITS_1,          //设置停止位    1
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,  //设置硬件流控制 不使能
        .source_clk = UART_SCLK_APB,            //设置时钟源
    };
    //安装串口驱动 串口编号、接收buff、发送buff、事件队列、分配中断的标志
    uart_driver_install(UART_NUM_0, RX_BUF_SIZE * 2, 0, 0, NULL, 0);
    //串口参数配置 串口号、串口配置参数
    uart_param_config(UART_NUM_0, &uart_config);
    //设置串口引脚号 串口编号、tx引脚、rx引脚、rts引脚、cts引脚
    uart_set_pin(UART_NUM_0, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
}

int sendData(const char* logName, const char* data)
{
    const int len = strlen(data);                               //获取数据长度  字符数据       
    const int txBytes = uart_write_bytes(UART_NUM_0, data, len);//发送数据
    ESP_LOGI(logName, "Wrote %d bytes", txBytes);               //log打印
    return txBytes;
}

static void tx_task(void *arg)
{
    static const char *TX_TASK_TAG = "TX_TASK";                 //发送内容
    esp_log_level_set(TX_TASK_TAG, ESP_LOG_INFO);               //设置log打印等级
    while (1) {
        sendData(TX_TASK_TAG, "Hello world");                   //发送数据
        vTaskDelay(2000 / portTICK_PERIOD_MS);                  //延时
    }
}

static void rx_task(void *arg)
{
    static const char *RX_TASK_TAG = "RX_TASK";                 //接收任务
    esp_log_level_set(RX_TASK_TAG, ESP_LOG_INFO);               //设置log打印
    uint8_t* data = (uint8_t*) malloc(RX_BUF_SIZE+1);           //申请动态内存
    while (1) {
        const int rxBytes = uart_read_bytes(UART_NUM_0, data, RX_BUF_SIZE, 1000 / portTICK_RATE_MS);//读取数据
        if (rxBytes > 0) {                                      //判断数据长度
            data[rxBytes] = 0;                                  //清空data中的数据
            ESP_LOGI(RX_TASK_TAG, "Read %d bytes: '%s'", rxBytes, data);        //log打印
            ESP_LOG_BUFFER_HEXDUMP(RX_TASK_TAG, data, rxBytes, ESP_LOG_INFO);   //打印16进制数据
        }
    }
    free(data);                                                 //释放内存
}

void app_main(void)
{
    init();                                                                             //初始化
    xTaskCreate(rx_task, "uart_rx_task", 1024*2, NULL, configMAX_PRIORITIES, NULL);     //接收任务
    xTaskCreate(tx_task, "uart_tx_task", 1024*2, NULL, configMAX_PRIORITIES-1, NULL);   //发送任务
}

